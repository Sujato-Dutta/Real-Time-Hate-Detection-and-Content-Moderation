name: ETL → Ingestion → DVC → Build Docker → Deploy to Hugging Face Spaces

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: hf-spaces-deploy
  cancel-in-progress: true

jobs:
  etl-ingest-dvc:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      # Use DagsHub token as S3-compatible creds for DVC remote defined in .dvc/config
      AWS_ACCESS_KEY_ID: ${{ secrets.DAGSHUB_TOKEN }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DAGSHUB_TOKEN }}
      # MLflow (DagsHub) from Secrets
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      # Kaggle API (if dataset requires auth)
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      # Supabase connection used by ETL/ingestion
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (incl. DVC, Streamlit, KaggleHub)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install "dvc[s3]" streamlit kagglehub
          # optional: install your package if setup.py present
          pip install -e .

      - name: Show tool versions
        run: |
          python --version
          dvc --version
          streamlit --version

      - name: Show DVC remotes
        run: |
          dvc remote list -v || true
          cat .dvc/config || true

      - name: Run ETL pipeline (Kaggle → transform → Supabase)
        run: |
          python run_etl_pipeline.py

      - name: Run data ingestion check (Supabase → DataFrame)
        run: |
          python run_data_ingestion

      - name: DVC repro (preprocess → train)
        run: |
          dvc pull -r origin || true
          dvc repro

      - name: DVC push artifacts
        run: |
          dvc push -r origin

      - name: Commit updated dvc.lock (if changed)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add dvc.lock
          git diff --staged --quiet || git commit -m "CI: update dvc.lock [skip ci]"
          git push

  docker-build:
    needs: etl-ingest-dvc
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image name
        id: meta
        shell: bash
        run: |
          NAME="${{ github.event.repository.name }}"
          OWNER="${{ github.repository_owner }}"
          # Lowercase & sanitize: replace non-alnum with '-', trim leading/trailing '-'
          SANITIZED_NAME=$(echo "$NAME"  | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g;s/^-+//;s/-+$//')
          SANITIZED_OWNER=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9-]+/-/g;s/^-+//;s/-+$//')
          echo "image=ghcr.io/${SANITIZED_OWNER}/${SANITIZED_NAME}" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}:latest
            ${{ steps.meta.outputs.image }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-space:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Ensure full history (unshallow if needed)
        shell: bash
        run: |
          if git rev-parse --is-shallow-repository | grep -q true; then
            git fetch --unshallow --tags
          fi

      - name: Push repo to Hugging Face Space (trigger rebuild)
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_USER: ${{ secrets.HF_USER }}
          HF_SPACE: ${{ secrets.HF_SPACE }}
        run: |
          git remote add space "https://${HF_USER}:${HF_TOKEN}@huggingface.co/spaces/${HF_USER}/${HF_SPACE}"
          # Retry once in case of transient server-side hooks (e.g., LFS)
          git push space HEAD:main --force || (sleep 10 && git push space HEAD:main --force)